/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchUserResponseDto model module.
 * @module model/PatchUserResponseDto
 * @version v0
 */
class PatchUserResponseDto {
    /**
     * Constructs a new <code>PatchUserResponseDto</code>.
     * @alias module:model/PatchUserResponseDto
     */
    constructor() { 
        
        PatchUserResponseDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchUserResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchUserResponseDto} obj Optional instance to populate.
     * @return {module:model/PatchUserResponseDto} The populated <code>PatchUserResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchUserResponseDto();

            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('userStatus')) {
                obj['userStatus'] = ApiClient.convertToType(data['userStatus'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchUserResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchUserResponseDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }
        // ensure the json data is a string
        if (data['userStatus'] && !(typeof data['userStatus'] === 'string' || data['userStatus'] instanceof String)) {
            throw new Error("Expected the field `userStatus` to be a primitive type in the JSON string but got " + data['userStatus']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}



/**
 * @member {String} username
 */
PatchUserResponseDto.prototype['username'] = undefined;

/**
 * @member {String} password
 */
PatchUserResponseDto.prototype['password'] = undefined;

/**
 * @member {String} email
 */
PatchUserResponseDto.prototype['email'] = undefined;

/**
 * @member {String} name
 */
PatchUserResponseDto.prototype['name'] = undefined;

/**
 * @member {String} surname
 */
PatchUserResponseDto.prototype['surname'] = undefined;

/**
 * @member {module:model/PatchUserResponseDto.UserStatusEnum} userStatus
 */
PatchUserResponseDto.prototype['userStatus'] = undefined;

/**
 * @member {module:model/PatchUserResponseDto.RoleEnum} role
 */
PatchUserResponseDto.prototype['role'] = undefined;

/**
 * @member {Date} modifiedOn
 */
PatchUserResponseDto.prototype['modifiedOn'] = undefined;





/**
 * Allowed values for the <code>userStatus</code> property.
 * @enum {String}
 * @readonly
 */
PatchUserResponseDto['UserStatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
PatchUserResponseDto['RoleEnum'] = {

    /**
     * value: "CLIENT"
     * @const
     */
    "CLIENT": "CLIENT",

    /**
     * value: "EMPLOYEE"
     * @const
     */
    "EMPLOYEE": "EMPLOYEE",

    /**
     * value: "PRESIDENT"
     * @const
     */
    "PRESIDENT": "PRESIDENT"
};



export default PatchUserResponseDto;

