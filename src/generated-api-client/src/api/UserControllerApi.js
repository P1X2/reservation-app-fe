/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetUserDto from '../model/GetUserDto';
import PatchUserCommand from '../model/PatchUserCommand';
import PatchUserResponseDto from '../model/PatchUserResponseDto';
import PatchUserRoleCommand from '../model/PatchUserRoleCommand';
import PatchUserStatusCommand from '../model/PatchUserStatusCommand';
import RegisterUserCommand from '../model/RegisterUserCommand';
import RegisterUserResponseDto from '../model/RegisterUserResponseDto';
import SetUserPasswordCommand from '../model/SetUserPasswordCommand';

/**
* UserController service.
* @module api/UserControllerApi
* @version v0
*/
export default class UserControllerApi {

    /**
    * Constructs a new UserControllerApi. 
    * @alias module:api/UserControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/UserControllerApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UserControllerApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling callDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/UserControllerApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SetUserPasswordCommand} setUserPasswordCommand 
     * @param {module:api/UserControllerApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(setUserPasswordCommand, callback) {
      let postBody = setUserPasswordCommand;
      // verify the required parameter 'setUserPasswordCommand' is set
      if (setUserPasswordCommand === undefined || setUserPasswordCommand === null) {
        throw new Error("Missing the required parameter 'setUserPasswordCommand' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/change-password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/UserControllerApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UserControllerApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserDto}
     */
    getById(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getById");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GetUserDto;
      return this.apiClient.callApi(
        '/user/get_by_id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUser operation.
     * @callback module:api/UserControllerApi~patchUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchUserResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PatchUserCommand} patchUserCommand 
     * @param {module:api/UserControllerApi~patchUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchUserResponseDto}
     */
    patchUser(patchUserCommand, callback) {
      let postBody = patchUserCommand;
      // verify the required parameter 'patchUserCommand' is set
      if (patchUserCommand === undefined || patchUserCommand === null) {
        throw new Error("Missing the required parameter 'patchUserCommand' when calling patchUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PatchUserResponseDto;
      return this.apiClient.callApi(
        '/user/patch-user-data', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUserRole operation.
     * @callback module:api/UserControllerApi~patchUserRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PatchUserRoleCommand} patchUserRoleCommand 
     * @param {module:api/UserControllerApi~patchUserRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchUserRole(patchUserRoleCommand, callback) {
      let postBody = patchUserRoleCommand;
      // verify the required parameter 'patchUserRoleCommand' is set
      if (patchUserRoleCommand === undefined || patchUserRoleCommand === null) {
        throw new Error("Missing the required parameter 'patchUserRoleCommand' when calling patchUserRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/change-role', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUserStatus operation.
     * @callback module:api/UserControllerApi~patchUserStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PatchUserStatusCommand} patchUserStatusCommand 
     * @param {module:api/UserControllerApi~patchUserStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchUserStatus(patchUserStatusCommand, callback) {
      let postBody = patchUserStatusCommand;
      // verify the required parameter 'patchUserStatusCommand' is set
      if (patchUserStatusCommand === undefined || patchUserStatusCommand === null) {
        throw new Error("Missing the required parameter 'patchUserStatusCommand' when calling patchUserStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/change-status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/UserControllerApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterUserResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RegisterUserCommand} registerUserCommand 
     * @param {module:api/UserControllerApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterUserResponseDto}
     */
    registerUser(registerUserCommand, callback) {
      let postBody = registerUserCommand;
      // verify the required parameter 'registerUserCommand' is set
      if (registerUserCommand === undefined || registerUserCommand === null) {
        throw new Error("Missing the required parameter 'registerUserCommand' when calling registerUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RegisterUserResponseDto;
      return this.apiClient.callApi(
        '/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
