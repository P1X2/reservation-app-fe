/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAppointmentCommand from '../model/CreateAppointmentCommand';
import CreateAppointmentResponseDto from '../model/CreateAppointmentResponseDto';
import PagedModelGetAppointmentDto from '../model/PagedModelGetAppointmentDto';

/**
* AppointmentController service.
* @module api/AppointmentControllerApi
* @version v0
*/
export default class AppointmentControllerApi {

    /**
    * Constructs a new AppointmentControllerApi. 
    * @alias module:api/AppointmentControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNewAppointment operation.
     * @callback module:api/AppointmentControllerApi~createNewAppointmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppointmentResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAppointmentCommand} createAppointmentCommand 
     * @param {module:api/AppointmentControllerApi~createNewAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppointmentResponseDto}
     */
    createNewAppointment(createAppointmentCommand, callback) {
      let postBody = createAppointmentCommand;
      // verify the required parameter 'createAppointmentCommand' is set
      if (createAppointmentCommand === undefined || createAppointmentCommand === null) {
        throw new Error("Missing the required parameter 'createAppointmentCommand' when calling createNewAppointment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CreateAppointmentResponseDto;
      return this.apiClient.callApi(
        '/appointment/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppointment operation.
     * @callback module:api/AppointmentControllerApi~deleteAppointmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appointmentId 
     * @param {module:api/AppointmentControllerApi~deleteAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppointment(appointmentId, callback) {
      let postBody = null;
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling deleteAppointment");
      }

      let pathParams = {
      };
      let queryParams = {
        'appointmentId': appointmentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppointmentsByDate operation.
     * @callback module:api/AppointmentControllerApi~getAppointmentsByDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedModelGetAppointmentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Date} date 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 2)] 
     * @param {String} [sortBy = 'appointmentDate')] 
     * @param {String} [sortDir = 'asc')] 
     * @param {module:api/AppointmentControllerApi~getAppointmentsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedModelGetAppointmentDto}
     */
    getAppointmentsByDate(date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getAppointmentsByDate");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': date,
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sortBy': opts['sortBy'],
        'sortDir': opts['sortDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedModelGetAppointmentDto;
      return this.apiClient.callApi(
        '/appointment/get-by-date', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppointmentsByUserId operation.
     * @callback module:api/AppointmentControllerApi~getAppointmentsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedModelGetAppointmentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 2)] 
     * @param {String} [sortBy = 'appointmentDate')] 
     * @param {String} [sortDir = 'asc')] 
     * @param {module:api/AppointmentControllerApi~getAppointmentsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedModelGetAppointmentDto}
     */
    getAppointmentsByUserId(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAppointmentsByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sortBy': opts['sortBy'],
        'sortDir': opts['sortDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedModelGetAppointmentDto;
      return this.apiClient.callApi(
        '/appointment/get-by-userId/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppointmentStatus operation.
     * @callback module:api/AppointmentControllerApi~updateAppointmentStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appointmentId 
     * @param {module:model/String} newStatus 
     * @param {module:api/AppointmentControllerApi~updateAppointmentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAppointmentStatus(appointmentId, newStatus, callback) {
      let postBody = null;
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling updateAppointmentStatus");
      }
      // verify the required parameter 'newStatus' is set
      if (newStatus === undefined || newStatus === null) {
        throw new Error("Missing the required parameter 'newStatus' when calling updateAppointmentStatus");
      }

      let pathParams = {
        'appointmentId': appointmentId
      };
      let queryParams = {
        'newStatus': newStatus
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/appointment/update-status/{appointmentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
